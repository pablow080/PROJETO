package org.desafioestagio.wicket;

import java.util.List;

import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.markup.html.AjaxLink;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.list.ListItem;
import org.apache.wicket.markup.html.list.ListView;
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.desafioestagio.backend.model.Cliente;
import org.desafioestagio.backend.model.PessoaFisica;
import org.desafioestagio.backend.service.ClienteService;
import org.desafioestagio.wicket.pages.ClienteFormPanel;

public class ClientePage extends WebPage {

    @SpringBean
    private ClienteService clienteService;

    // Container que atuará como a "modal"
    private final WebMarkupContainer modalContainer;

    public ClientePage() {
        // Cria e configura o container que simula a janela modal
        modalContainer = new WebMarkupContainer("modalContainer");
        modalContainer.setOutputMarkupPlaceholderTag(true); // Necessário para atualizações via Ajax mesmo quando invisível
        modalContainer.setVisible(false); // Começa oculto
        add(modalContainer);

        // Link para abrir o formulário de cadastro de novo cliente
        AjaxLink<Void> addClientLink = new AjaxLink<Void>("addClientLink") {
            @Override
            public void onClick(AjaxRequestTarget target) {
                // Adiciona o painel de formulário dentro do modalContainer para novo registro (cliente = null)
                modalContainer.addOrReplace(new ClienteFormPanel("modalContent", modalContainer, null) {
                    @Override
                    protected void onSave(AjaxRequestTarget target, Cliente cliente) {
                        clienteService.salvar(cliente);
                        modalContainer.setVisible(false);
                        target.add(modalContainer);
                        setResponsePage(ClientePage.class);
                    }
                });
                // Exibe o modal e atualiza via Ajax
                modalContainer.setVisible(true);
                target.add(modalContainer);
            }
        };
        add(addClientLink);

        // Lista de clientes obtida do serviço
        List<Cliente> clientes = clienteService.listarTodos();

        // ListView para exibir os clientes
        ListView<Cliente> listView = new ListView<Cliente>("clientList", clientes) {
            @Override
            protected void populateItem(ListItem<Cliente> item) {
                Cliente cliente = item.getModelObject();

                item.add(new Label("id", String.valueOf(cliente.getId())));
                item.add(new Label("cpfCnpj", cliente.getCpfCnpj()));
                item.add(new Label("email", cliente.getEmail()));
                item.add(new Label("ativo", cliente.isAtivo() ? "Sim" : "Não"));

                // Campos específicos para Pessoa Física
                if (cliente instanceof PessoaFisica pf) {
                    item.add(new Label("nome", pf.getNome()));
                    item.add(new Label("rg", pf.getRg()));
                    item.add(new Label("dataNascimento",
                            (pf.getDataNascimento() != null ? pf.getDataNascimento().toString() : "")));
                } else {
                    item.add(new Label("nome", ""));
                    item.add(new Label("rg", ""));
                    item.add(new Label("dataNascimento", ""));
                }

                // Link para editar o cliente
                AjaxLink<Void> editLink = new AjaxLink<Void>("editLink") {
                    @Override
                    public void onClick(AjaxRequestTarget target) {
                        // Prepara o painel de edição com o cliente carregado
                        modalContainer.addOrReplace(new ClienteFormPanel("modalContent", modalContainer, cliente) {
                            @Override
                            protected void onSave(AjaxRequestTarget target, Cliente cliente) {
                                clienteService.atualizar(cliente.getId(), cliente);
                                modalContainer.setVisible(false);
                                target.add(modalContainer);
                                setResponsePage(ClientePage.class);
                            }
                        });
                        modalContainer.setVisible(true);
                        target.add(modalContainer);
                    }
                };
                item.add(editLink);

                // Link para excluir o cliente
                AjaxLink<Void> deleteLink = new AjaxLink<Void>("deleteLink") {
                    @Override
                    public void onClick(AjaxRequestTarget target) {
                        clienteService.excluir(cliente.getId());
                        setResponsePage(ClientePage.class);
                    }
                };
                item.add(deleteLink);
            }
        };
        add(listView);
    }
}
